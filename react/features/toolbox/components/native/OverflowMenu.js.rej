***************
*** 20,25 ****
  import HelpButton from '../HelpButton';
  import RaiseHandButton from './RaiseHandButton';
  import ToggleCameraButton from './ToggleCameraButton';
  
  /**
   * The type of the React {@code Component} props of {@link OverflowMenu}.
--- 20,26 ----
  import HelpButton from '../HelpButton';
  import RaiseHandButton from './RaiseHandButton';
  import ToggleCameraButton from './ToggleCameraButton';
+ import DesktopSharingButton from './DesktopSharingButton';
  
  /**
   * The type of the React {@code Component} props of {@link OverflowMenu}.
***************
*** 112,117 ****
                  <RaiseHandButton { ...buttonProps } />
                  <SharedDocumentButton { ...buttonProps } />
                  <HelpButton { ...buttonProps } />
              </BottomSheet>
          );
      }
--- 113,122 ----
                  <RaiseHandButton { ...buttonProps } />
                  <SharedDocumentButton { ...buttonProps } />
                  <HelpButton { ...buttonProps } />
+                 {
+                     this.props._desktopSharingEnabled
+                         && <DesktopSharingButton  { ...buttonProps } />
+                 }
              </BottomSheet>
          );
      }
***************
*** 143,154 ****
   * @returns {Props}
   */
  function _mapStateToProps(state) {
      return {
          _bottomSheetStyles:
              ColorSchemeRegistry.get(state, 'BottomSheet'),
          _chatEnabled: getFeatureFlag(state, CHAT_ENABLED, true),
          _isOpen: isDialogOpen(state, OverflowMenu_),
-         _recordingEnabled: Platform.OS !== 'ios' || getFeatureFlag(state, IOS_RECORDING_ENABLED)
      };
  }
  
--- 148,169 ----
   * @returns {Props}
   */
  function _mapStateToProps(state) {
+     let { desktopSharingEnabled } = state['features/base/conference'];
+     if (state['features/base/config'].enableFeaturesBasedOnToken) {
+         // we enable desktop sharing if any participant already have this
+         // feature enabled
+         desktopSharingEnabled = getParticipants(state)
+             .find(({ features = {} }) =>
+                 String(features['screen-sharing']) === 'true') !== undefined;
+     }
+ 
      return {
          _bottomSheetStyles:
              ColorSchemeRegistry.get(state, 'BottomSheet'),
          _chatEnabled: getFeatureFlag(state, CHAT_ENABLED, true),
          _isOpen: isDialogOpen(state, OverflowMenu_),
+         _recordingEnabled: Platform.OS !== 'ios' || getFeatureFlag(state, IOS_RECORDING_ENABLED),
+         _desktopSharingEnabled: Boolean(desktopSharingEnabled)
      };
  }
  
